// <auto-generated />
using System;
using LibraryCourse.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace LibraryCourse.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20191108214912_smth")]
    partial class smth
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0");

            modelBuilder.Entity("LibraryCourse.Models.Books", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Book_Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibraryCourse.Models.History", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("CardId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("LibraryCourse.Models.Library_Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Library_Card");
                });

            modelBuilder.Entity("LibraryCourse.Models.Queue", b =>
                {
                    b.Property<int>("CardId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BookId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.HasKey("CardId", "BookId");

                    b.HasIndex("BookId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("LibraryCourse.Models.Requests", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Comment")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("LibraryCourse.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Role_Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("LibraryCourse.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Full_Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("User_RoleId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("User_RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LibraryCourse.Models.History", b =>
                {
                    b.HasOne("LibraryCourse.Models.Books", "Books")
                        .WithMany("History")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryCourse.Models.Library_Card", "Library_Card")
                        .WithMany("History")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCourse.Models.Library_Card", b =>
                {
                    b.HasOne("LibraryCourse.Models.User", "User")
                        .WithOne("Library_Card")
                        .HasForeignKey("LibraryCourse.Models.Library_Card", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCourse.Models.Queue", b =>
                {
                    b.HasOne("LibraryCourse.Models.Books", "Books")
                        .WithMany("Queue")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibraryCourse.Models.Library_Card", "Library_Card")
                        .WithMany("Queue")
                        .HasForeignKey("CardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCourse.Models.Requests", b =>
                {
                    b.HasOne("LibraryCourse.Models.User", "User")
                        .WithOne("User_Requests")
                        .HasForeignKey("LibraryCourse.Models.Requests", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibraryCourse.Models.User", b =>
                {
                    b.HasOne("LibraryCourse.Models.Role", "User_Role")
                        .WithMany("User")
                        .HasForeignKey("User_RoleId");
                });
#pragma warning restore 612, 618
        }
    }
}
